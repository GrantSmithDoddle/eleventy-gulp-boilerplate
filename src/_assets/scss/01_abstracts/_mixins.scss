// CLEARFIX //
@mixin clearfix() {
  &:after {
    display: block;
    clear: both;
    content: '';
  }
}

// BREAKPOINTS

// Mixin to manage responsive breakpoints
// @author Hugo Giraudel
// @param {String} $breakpoint - Breakpoint name
// @require $breakpoints

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// TYPOGRAPHY - FLUID //

@mixin fluid-font($responsive, $min, $max: false, $fallback: false) {
  font-size: $responsive;

  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  @if $fallback {
    font-size: $fallback;
  }
}

// ANIMATIONS

@mixin basic-transition($properties: (all), $duration: $transition-duration, $delay: null, $easing: $easing) {
  transition: $value;

  $value: null;

  @each $prop in $properties {
    $prop-value: append((), $prop, space);
    $prop-value: append($prop-value, $duration, space);
    $prop-value: append($prop-value, $easing, space);
    $value: append($value, $prop-value, comma);

    @if $delay != null {
      $prop-value: append($prop-value, $delay, space);
    }
  }
}

// OVERFLOW //

@mixin overflow-touch {
  -webkit-overflow-scrolling: touch;
}

// COLUMNS GRID //
@mixin columns {
  display: block;
  margin-right: auto;
  margin-left: auto;
  max-width: 625px;

  @include respond-to('medium') {
    display: grid;
    max-width: 100%;

    grid-auto-flow: dense;
    grid-gap: 1.5em;
  }
}
